#line 2 "/home/soroosh/Project/gdev/build/cuda/ptx.cpp"

#line 4 "/home/soroosh/Project/gdev/build/cuda/ptx.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ptxFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *ptxalloc (yy_size_t  );
void *ptxrealloc (void *,yy_size_t  );
void ptxfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int parser::PTXLexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 284
#define YY_END_OF_BUFFER 285
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[820] =
    {   0,
      264,  264,  285,  284,  264,  266,  265,  281,  284,  284,
      284,  274,  275,  277,  267,  280,  269,  284,  249,  246,
      268,  276,  279,  278,  284,  260,  260,  272,  273,  283,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  270,  282,  271,
      264,  266,  265,    0,  261,    0,    0,    0,    0,    0,
        0,  260,  246,  256,  256,  256,  256,    0,  188,  187,
        0,    0,    0,    0,  186,    0,    0,    0,    0,    0,
        0,  205,  185,    0,    0,    0,    0,  184,  181,  182,
      183,    0,  263,    0,  256,  249,    0,    0,    0,    0,

      253,    0,  246,  250,    0,    0,  258,    0,  260,  257,
        0,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,   33,  260,  260,
      260,  260,  260,  260,  260,  260,   46,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
       66,  260,  260,  260,  260,  260,  260,  260,    0,    0,
        0,    0,    3,    0,    0,  246,    0,  256,  198,  199,
      200,  213,  214,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  132,    0,    0,  206,  176,
      208,    0,    0,    0,  209,    0,    0,  211,    0,    0,

        0,  140,    0,    0,    0,    0,    0,    0,    0,    0,
      145,  111,  144,    0,  159,  147,    0,  143,  160,  146,
      142,  210,    0,    0,    0,  141,    0,    0,  157,    0,
        0,    0,    0,    0,    0,  162,  161,  164,  163,    0,
        0,    0,  126,    0,    0,    0,    0,    0,    0,    0,
      226,    0,    0,    0,    0,  129,    0,  179,  180,    0,
        0,    0,  207,    0,    0,  212,    0,    0,    0,    0,
      263,  262,    0,  247,    0,    0,  256,    0,  248,    0,
      259,  258,  258,   13,    9,   11,  260,   14,   16,   15,
       18,  260,  260,  260,   22,  260,  260,   25,   26,   28,

       29,  260,   31,  260,   34,   35,   38,  260,   40,  260,
       37,   41,   42,   44,   45,  260,  260,  260,  260,   52,
       53,   54,   55,  260,   57,  260,   59,   61,   62,   63,
      260,  260,  260,   67,  260,   72,  260,  260,  260,   74,
      260,  260,   77,  260,   79,    0,    0,    0,    0,    0,
        0,    0,    0,  256,  201,  202,    0,  195,    0,  190,
      156,  189,    0,    0,  133,  134,  235,  135,    0,    0,
        0,  196,    0,    0,    0,  110,    0,  193,    0,  237,
      238,    0,  148,    0,    0,  136,  138,  234,  137,    0,
        0,  170,    0,    0,  153,    0,  152,    0,  194,    0,

      151,   91,  150,  192,  191,  155,  149,    0,    0,  154,
        0,    0,    0,    0,   98,    0,  236,  230,   99,  166,
      165,  168,  167,  127,  125,  128,    0,  169,    0,    0,
        0,    0,    0,    0,  112,    0,    0,    0,    0,  130,
      124,  131,  173,    0,    0,    0,    0,    0,  158,    0,
      263,  262,  263,  251,    0,  256,    0,    0,    0,  252,
      259,  259,   10,   12,  260,   19,  260,   21,   23,  260,
       27,   30,  260,  260,  260,  260,  260,  260,   50,  260,
       51,  260,   58,   60,   64,  260,  260,  260,   65,   68,
       69,  260,   70,  260,  260,   75,   76,   78,    0,    5,

        0,    8,    0,    0,    7,    0,    0,    0,    0,    0,
        0,  174,    0,    0,    0,    0,  203,    0,    0,  197,
        0,   87,    0,    0,  178,   88,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  232,    0,  139,  239,
        0,    0,    0,    0,    0,    0,  231,  172,    0,    0,
      225,    0,    0,    0,  109,  175,    0,  228,    0,    0,
        0,  256,   17,   20,  260,  260,   39,  260,  260,   43,
      260,  260,   56,  113,  114,  115,  116,  117,  118,  119,
      120,   71,   73,  260,    0,    6,    4,    0,  204,    0,
        0,   80,    0,    0,    0,    0,    0,    0,  227,   84,

      217,   85,    0,    0,    0,    0,    0,    0,   90,    0,
        0,    0,    0,    0,    0,    0,   96,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  215,
        0,    0,  256,  256,  260,  260,  260,   36,  260,  260,
      260,    2,    0,    0,    0,  171,  229,  233,    0,    0,
        0,   86,    0,  240,   89,  216,    0,    0,    0,    0,
        0,  244,    0,  242,   97,    0,    0,  102,    0,    0,
        0,  105,  106,    0,    0,    0,    0,  256,  260,  260,
      260,   47,  260,  260,    1,    0,    0,    0,    0,    0,
        0,    0,    0,   94,   95,    0,    0,    0,    0,  101,

        0,    0,  104,  107,  108,    0,    0,   24,   32,  260,
       48,  260,    0,    0,    0,    0,    0,    0,  241,    0,
        0,    0,    0,    0,  103,    0,  177,    0,  260,   49,
      260,  260,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  245,  254,  260,  260,  260,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  243,
      100,    0,  260,  260,  260,  220,  221,  222,    0,    0,
       83,    0,    0,  219,    0,    0,    0,    0,  260,  260,
      260,   81,    0,    0,    0,   92,   93,    0,    0,  260,
      260,  260,   82,    0,  224,    0,    0,  121,  260,  260,

        0,    0,    0,  260,  123,    0,    0,    0,  260,    0,
        0,    0,  260,  223,  218,  255,  260,  122,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,    1,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,    1,   34,   35,   36,   35,   37,   38,   39,
       40,   40,   41,   40,   40,   42,   40,   40,   40,   43,
       40,   40,   40,   41,   44,   40,   40,   45,   40,   40,
       46,   47,   48,    1,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   40,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[78] =
    {   0,
        1,    2,    3,    2,    2,    4,    1,    1,    5,    6,
        1,    1,    1,    7,    1,    7,    8,    1,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    2,    1,
        1,    1,    1,    1,   10,   10,   10,   11,   12,    5,
        5,   13,    5,   14,    5,    1,    1,    1,    5,   10,
       10,   10,   10,   11,   12,    5,    5,    5,    5,   13,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[857] =
    {   0,
        0,    0, 1692, 2274, 1688,   75, 1684, 2274,   73,   28,
        0, 2274, 2274, 2274, 2274,   69,  102,   85,  160,   93,
     2274, 2274, 2274, 2274,   96,  107,  111, 2274, 2274,    0,
      187,  198,  215,  204,  221,  237,  232,  241,  252,  278,
      267,  282,  299,  365,  318,  287,  325, 2274, 2274, 2274,
     1684,   81, 1668,   92, 2274, 1658, 1597,   57, 1592,   45,
     1590,  332,  376,  320,  389, 1594, 1591,  113,  386,  391,
      403, 1581,  311,  454,   81,   84, 1572,  415,  143,  255,
     1554,  144,  433,  471,  197,  479,  323,  284, 1556, 2274,
     1560, 1600, 1604, 1602, 1546,  528,  214,  415,    0,  132,

     2274, 1581,  391, 2274,  264,    0,    0,  484,  498, 2274,
      143,  506,  514,  528,  532,  558,  572,  581,  586,  592,
      598,  603,  607,  612,  618,  640,  648,  652,  658,  669,
      681,  687,  691,  695,  700,  707,  721,  730,  735,  741,
      749,  758,  763,  767,  772,  777,  786,  781,  812,  820,
      825,  834,  840,  851,  855,  860,  866,  873, 1540, 1523,
     1534, 1526, 1532, 1527, 1511,  894,  208, 2274, 2274, 2274,
     2274, 2274, 2274, 1507, 1505, 1485, 1498,  170,  206, 1486,
     1480, 1520, 1523, 1488, 1518, 2274, 1480, 1470,   41, 2274,
     2274, 1479, 1470, 1455, 2274, 1463, 1458, 2274,  224,  101,

     1435, 1431,  287, 1469, 1472, 1436, 1466,  252, 1414,  257,
     1412, 1416, 1405, 1415, 2274, 2274,  166, 1395, 1409, 2274,
     1390, 2274, 1386, 1386, 1385, 1371,  319, 1375, 2274, 1369,
     1370,  306, 1365,  337,  312, 1369, 1364, 1360, 1356, 1388,
     1390, 1387, 2274,  321, 1357,  250,  274,  228,  313, 1334,
     2274, 1350, 1373, 1372, 1363, 2274, 1323, 2274, 2274, 1301,
     1295, 1301, 2274, 1308, 1304, 2274, 1290, 1281, 1319, 1311,
        0,    0,   96,  852,    0,  921,  912,    0,  393,    0,
        0,    0,    0,  877,  906,  928,  948,  957,  961,  966,
      971,  976,  983,  989,  994, 1002, 1006, 1011, 1015, 1022,

     1028, 1032, 1037, 1048, 1054, 1058, 1067, 1076, 1080, 1087,
     1093, 1097, 1102, 1106, 1113, 1125, 1132, 1139, 1143, 1147,
     1151, 1158, 1162, 1169, 1173, 1177, 1181, 1188, 1195, 1199,
     1203, 1217, 1211, 1221, 1225, 1229, 1247, 1251, 1255, 1259,
     1263, 1270, 1285, 1289, 1293, 1267, 1267, 1259, 1262, 1258,
     1240, 1242, 1283, 1299, 2274, 2274, 1234, 1217, 1226, 2274,
     2274, 2274, 1215, 1219, 2274, 2274, 2274, 2274, 1210, 1215,
     1206, 2274, 1200, 1187, 1180, 2274, 1190, 2274, 1175, 2274,
     2274, 1176, 2274, 1179, 1166, 2274, 2274, 2274, 2274,  337,
     1160, 2274, 1154, 1160, 2274, 1158, 2274, 1140, 2274, 1131,

     2274, 1138, 2274, 1108, 1107, 2274, 2274, 1104, 1109, 1107,
     1107, 1098, 1090, 1087, 2274, 1114, 2274, 2274, 2274, 2274,
     2274, 2274, 2274, 2274, 2274, 2274, 1069, 2274, 1064, 1062,
     1069, 1059, 1065, 1067, 2274, 1054, 1057, 1037, 1030, 2274,
     2274, 2274, 2274, 1026, 1032, 1036, 1017,  386, 2274, 1012,
     2274,    0,    0, 2274,    0, 2274,  404,  462,  451, 2274,
        0,    0, 1322, 1326, 1331, 1335, 1340, 1344, 1348, 1361,
     1366, 1370, 1374, 1378, 1383, 1387, 1392, 1400, 1415, 1421,
     1428, 1437, 1441, 1447, 1451, 1463, 1458, 1467, 1493, 1497,
     1502, 1506, 1510, 1514, 1519, 1523, 1528, 1532, 1012, 2274,

     1018, 2274, 1013,  998, 2274, 1010,  277,  993,  991,  978,
      982, 2274,  353,  981,  974,  961, 2274,  968,  949, 2274,
      955, 2274,  960,  935, 2274, 2274,  952,  944,  935,  932,
      463,  937,  934,  921,  928,  918, 2274,  913, 2274, 2274,
      909,  906,  906,  888,  892,  871, 2274, 2274,  882,  877,
     2274,  866,  872,  841, 2274, 2274,  846, 2274,    0,  554,
     1543, 1533, 1551, 1572, 1579, 1587, 1592, 1598, 1602, 1607,
     1613, 1620, 1624, 1628, 1636, 1641, 1650, 1654, 1658, 1662,
     1667, 1672, 1676, 1680,  844, 2274, 2274,  844, 2274,  831,
      824, 2274,  818,  833,  815,  810,  824,  819, 2274, 2274,

     2274, 2274,  810,  801,  812,  798,  784,  793, 2274,  782,
      793,  788,  767,  774,  762,  757, 2274,  771,  764,  749,
      756,  758,  741,  751,  736,  748,  737,  738,  739, 2274,
        0, 1691, 1681, 2274, 1698, 1702, 1720, 1724, 1730, 1735,
     1740, 2274,  740,  730,  722, 2274, 2274, 2274,  717,  707,
      706, 2274,  709, 2274, 2274, 2274,  689,  702,  692,  694,
      694,  680,  670, 2274, 2274,  664,  666, 2274,  666,  658,
      663, 2274, 2274,  655,  660,  653,    0, 2274, 1746, 1753,
     1761, 1766, 1772, 1776, 2274,  655,  658,  638,  647,  652,
      633,  634,  620, 2274, 2274,  608,  594,  614,  598, 2274,

      591,  608, 2274, 2274, 2274,  601,    0, 1784, 1795, 1802,
     1807, 1814,  594,  576,  575,  583,  461,  571, 2274,  579,
      575,  574,  571,  565, 2274,  558, 2274,    0, 1818, 1828,
     1833, 1837,  564,  541,  530,  525,  542,  523,  531,  509,
      499,  511,  493,  503, 2274,    0, 1844, 1848, 1856,  559,
      472,  469,  472,  470,  467,  463,  442,  414,  431, 2274,
     2274,    0, 1863, 1882, 1886, 2274, 2274, 2274,  421,  398,
     2274,  411,  404, 2274,  371,  363,  360,    0, 1898, 1892,
     1902, 2274,  355,  344,  326, 2274, 2274,  286,    0, 1908,
     1920, 1928, 2274,  199, 2274,  195,    0, 1938, 1942, 1946,

      162,  163,    0, 1950, 1957,  131,  125,    0, 1961,   50,
       20,    0, 1968, 2274, 2274, 2274, 1976, 1983, 2274, 2044,
     2054, 2061, 2072, 2085, 2091, 2104, 2118, 2125, 2128,  562,
     2133, 2141, 2151, 2161,  597, 2175, 2181, 2185, 2193, 2203,
     2209,  642, 2213,  671, 2217, 2221, 2225, 2229, 2233, 2237,
     2241, 2245, 2249, 2253, 2257, 2261
    } ;

static yyconst flex_int16_t yy_def[857] =
    {   0,
      819,    1,  819,  819,  819,  819,  819,  819,  820,  819,
      821,  819,  819,  819,  819,  819,  819,  819,  819,  822,
      819,  819,  819,  819,  823,  824,  824,  819,  819,  821,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  819,  819,  819,
      819,  819,  819,  820,  819,  820,  819,  819,  819,  819,
      819,  821,  819,  825,  825,   65,   65,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  826,  827,  819,   65,  819,  828,  819,  829,  830,

      819,  831,  822,  819,  832,  833,  834,  819,  824,  819,
      820,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  819,  819,
      819,  819,  819,  819,  819,  819,  835,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  826,  826,
      827,  836,  819,  819,  837,  819,  830,  838,  831,  839,
      840,  833,  834,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  819,  819,  819,  819,  819,
      819,  819,  819,  835,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  836,  827,  819,  841,  819,  838,  838,  842,  819,
      839,  840,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  843,  844,
      819,  842,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      845,  819,  844,  819,  824,  824,  824,  824,  824,  824,
      824,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  846,  819,  824,  824,
      824,  824,  824,  824,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  847,  824,  824,  824,
      824,  824,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  848,  824,  824,
      824,  824,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  849,  824,  824,  824,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  850,  824,  824,  824,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  851,  824,  824,
      824,  819,  819,  819,  819,  819,  819,  819,  852,  824,
      824,  824,  819,  819,  819,  819,  853,  824,  824,  824,

      819,  819,  854,  824,  824,  819,  819,  855,  824,  819,
      819,  856,  824,  819,  819,  819,  824,  824,    0,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819
    } ;

static yyconst flex_int16_t yy_nxt[2352] =
    {   0,
        4,    5,    6,    6,    7,    8,    9,   10,   11,   11,
       12,   13,    4,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   20,    4,   21,
       22,   23,   24,   25,   26,   26,   26,   26,   26,   26,
       26,   27,   26,   26,   26,   28,    4,   29,   30,   31,
       32,   33,   34,   35,   36,   26,   26,   37,   26,   38,
       39,   40,   41,   42,   26,   43,   44,   45,   26,   46,
       26,   47,   26,   26,   48,   49,   50,   52,   52,   55,
       57,   58,   59,   52,   52,   60,  815,   61,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   92,   55,  163,

      371,  105,   93,  814,  106,  106,  164,  372,  108,   95,
      108,  108,  108,  453,  108,  108,  160,  111,  161,   56,
       64,   65,   66,   67,   64,   64,   64,   64,   64,   64,
      100,   94,  172,  173,  211,  110,  104,  214,   56,  110,
      212,  215,   94,   68,  106,  276,  100,  276,  213,   55,
      216,   69,   70,   71,   72,   73,   74,   75,   76,   77,
      380,   78,   79,   80,   81,   82,  381,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   95,  811,   96,   96,
       96,   96,   96,   96,   96,   96,   97,   97,  108,   56,
      108,  108,  223,  230,  810,   98,   99,  100,   99,  108,

      224,  108,  108,  101,  102,  108,  231,  108,  108,  232,
       98,  233,   99,  100,   99,  110,  108,  399,  108,  108,
      400,  353,  108,  353,  108,  108,  110,  359,  807,  360,
       95,  102,  110,  108,  806,  108,  108,  112,  108,  113,
      108,  108,  108,  110,  108,  108,  249,  116,  114,  110,
      250,  100,  117,  108,  115,  108,  108,  802,  361,  251,
      110,  124,  252,  118,  119,  110,  801,  100,  108,  110,
      108,  108,  280,  280,  120,  378,  121,  122,  362,  108,
      110,  108,  108,  108,  123,  108,  108,  379,  108,  434,
      108,  108,  125,  128,  435,  110,  129,  126,  127,  430,

      108,  130,  108,  108,  225,  131,  110,  431,  226,  132,
      110,  390,  280,  391,  133,  110,  393,  227,  394,  108,
      134,  108,  108,  228,  432,  590,  108,  110,  108,  108,
      591,  135,  137,  108,  263,  108,  108,  264,  384,  433,
      136,  265,  138,  258,  139,  259,  110,  140,  796,  157,
      141,  266,  142,  110,  385,  413,  416,  167,  168,  414,
      110,  168,  200,  417,  418,  143,  108,  419,  108,  108,
      436,  153,  201,  167,  168,  202,  260,  154,  437,  168,
      261,  427,  203,  155,  408,  262,  409,  158,  428,  156,
      522,  795,  794,  110,  166,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  523,  174,  175,   95,  793,  458,
      182,  788,  183,  184,  144,  185,  596,  186,  145,  104,
      597,  146,  147,  787,  148,  149,  167,  168,  100,  150,
      168,  786,  151,  152,  104,  459,  460,  176,  177,  556,
      187,  169,  167,  168,  100,  178,  560,  179,  168,  180,
      274,  181,  189,  557,  190,  274,  459,  785,  191,  192,
      784,  783,  193,  188,  561,  194,  561,  560,  218,  195,
      196,  197,  198,  204,  782,  205,  206,  219,  207,  777,
      776,  220,  221,  222,  234,  108,  235,  108,  108,  274,
      240,  274,  241,  236,  237,  242,  238,  243,  253,  108,

      254,  108,  108,  255,  560,  256,  239,  108,  775,  108,
      108,  208,  110,  737,  610,  108,  774,  108,  108,  773,
      244,  209,  210,  738,  245,  560,  110,  246,  611,  108,
      612,  108,  108,  108,  110,  108,  108,  772,  771,  247,
      257,  770,  110,  248,   95,  769,   96,   96,   96,   96,
       96,   96,   96,   96,   97,   97,  110,  761,  760,  108,
      110,  108,  108,  759,  758,  100,  285,  632,  277,  632,
      277,  101,  284,  108,  757,  108,  108,  766,  767,  768,
      286,  100,  108,  756,  108,  108,  110,  108,  755,  108,
      108,  754,  753,  108,  287,  108,  108,  752,  751,  108,

      110,  108,  108,  354,  108,  354,  108,  108,  108,  110,
      108,  108,  750,  108,  110,  108,  108,  745,  744,  108,
      110,  108,  108,  288,  743,  289,  110,  742,  741,  290,
      291,  110,  740,  739,  292,  110,  736,  735,  301,  293,
      110,  108,  734,  108,  108,  294,  110,  733,  562,  108,
      562,  108,  108,  108,  727,  108,  108,  726,  725,  108,
      296,  108,  108,  724,  723,  295,  297,  722,  110,  298,
      108,  721,  108,  108,  299,  302,  110,  633,  306,  633,
      110,  300,  108,  720,  108,  108,  110,  719,  108,  303,
      108,  108,  108,  718,  108,  108,  108,  110,  108,  108,

      717,  108,  716,  108,  108,  715,  714,  713,  108,  110,
      108,  108,  706,  705,  304,  110,  704,  703,  702,  110,
      305,  307,  108,  110,  108,  108,  701,  700,  110,  699,
      698,  108,  308,  108,  108,  110,  108,  697,  108,  108,
      309,  310,  108,  696,  108,  108,  695,  694,  311,  110,
      108,  693,  108,  108,  313,  314,  692,  691,  110,  108,
      312,  108,  108,  110,  108,  690,  108,  108,  108,  110,
      108,  108,  689,  108,  315,  108,  108,  110,  108,  688,
      108,  108,  108,  316,  108,  108,  110,  108,  687,  108,
      108,  110,  686,  685,  318,  110,  676,  675,  317,  674,

      110,  319,  673,  672,  671,  110,  670,  669,  668,  110,
      321,  667,  320,  108,  110,  108,  108,  666,  322,  325,
      665,  108,  664,  108,  108,  323,  108,  324,  108,  108,
      663,  326,  331,  662,  661,  108,  328,  108,  108,  327,
      110,  108,  329,  108,  108,  660,  659,  330,  110,  658,
      657,  656,  108,  110,  108,  108,  108,  655,  108,  108,
      332,  108,  110,  108,  108,  654,  653,  108,  110,  108,
      108,  652,  651,  650,  108,  649,  108,  108,  108,  110,
      108,  108,  648,  110,  334,  333,  647,  274,  110,  646,
      645,  644,  274,  335,  110,  454,  643,  642,  336,  337,

      338,  110,  630,  341,  342,  110,  339,  108,  629,  108,
      108,  340,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  628,  627,  343,  819,  274,  819,  274,  108,
      626,  108,  108,  344,  110,  625,  624,  104,  345,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  108,
      456,  108,  108,  456,  623,  622,  110,  463,  108,  621,
      108,  108,  108,  620,  108,  108,  456,  108,  619,  108,
      108,  456,  108,  618,  108,  108,  110,  108,  617,  108,
      108,  616,  615,  614,  108,  110,  108,  108,  613,  110,
      108,  609,  108,  108,  110,  108,  608,  108,  108,  110,

      607,  606,  605,  108,  110,  108,  108,  108,  464,  108,
      108,  110,  108,  604,  108,  108,  108,  110,  108,  108,
      603,  602,  110,  108,  601,  108,  108,  465,  600,  108,
      110,  108,  108,  108,  110,  108,  108,  599,  108,  110,
      108,  108,  598,  110,  595,  466,  467,  594,  468,  108,
      110,  108,  108,  593,  592,  108,  110,  108,  108,  108,
      110,  108,  108,  589,  471,  110,  588,  587,  108,  469,
      108,  108,  586,  585,  558,  555,  110,  108,  470,  108,
      108,  108,  110,  108,  108,  554,  110,  474,  108,  553,
      108,  108,  552,  551,  108,  110,  108,  108,  108,  472,

      108,  108,  550,  108,  110,  108,  108,  108,  110,  108,
      108,  473,  549,  548,  108,  110,  108,  108,  547,  546,
      545,  110,  477,  544,  475,  110,  108,  543,  108,  108,
      110,  542,  541,  108,  110,  108,  108,  476,  540,  539,
      108,  110,  108,  108,  108,  538,  108,  108,  108,  537,
      108,  108,  108,  110,  108,  108,  536,  535,  534,  108,
      110,  108,  108,  108,  533,  108,  108,  110,  532,  531,
      108,  110,  108,  108,  108,  110,  108,  108,  108,  110,
      108,  108,  108,  479,  108,  108,  110,  530,  529,  108,
      110,  108,  108,  480,  478,  528,  108,  110,  108,  108,

      108,  110,  108,  108,  108,  110,  108,  108,  527,  110,
      481,  526,  108,  525,  108,  108,  110,  524,  108,  521,
      108,  108,  108,  110,  108,  108,  108,  110,  108,  108,
      108,  110,  108,  108,  482,  520,  486,  487,  488,  110,
      483,  519,  518,  517,  484,  110,  516,  515,  108,  110,
      108,  108,  108,  110,  108,  108,  108,  110,  108,  108,
      108,  514,  108,  108,  108,  513,  108,  108,  512,  511,
      485,  108,  490,  108,  108,  110,  510,  491,  489,  110,
      509,  508,  507,  110,  506,  496,  108,  110,  108,  108,
      108,  110,  108,  108,  108,  505,  108,  108,  110,  504,

      492,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  503,  819,  110,  819,  502,  501,  110,  493,  495,
      500,  110,  494,  108,  499,  108,  108,  108,  451,  108,
      108,  270,  108,  497,  108,  108,  108,  168,  108,  108,
      168,  108,  498,  108,  108,  108,  450,  108,  108,  108,
      110,  108,  108,  168,  110,  449,  448,  447,  168,  110,
      446,  445,  108,  110,  108,  108,  444,  108,  110,  108,
      108,  108,  110,  108,  108,  108,  110,  108,  108,  108,
      443,  108,  108,  563,  108,  442,  108,  108,  108,  110,
      108,  108,  441,  108,  110,  108,  108,  440,  110,  439,

      567,  108,  110,  108,  108,  438,  110,  564,  429,  426,
      425,  110,  424,  423,  570,  110,  108,  422,  108,  108,
      110,  421,  108,  566,  108,  108,  420,  565,  110,  108,
      415,  108,  108,  412,  411,  410,  569,  568,  108,  407,
      108,  108,  108,  110,  108,  108,  406,  405,  108,  110,
      108,  108,  108,  571,  108,  108,  110,  404,  403,  108,
      402,  108,  108,  401,  108,  110,  108,  108,  108,  110,
      108,  108,  398,  397,  572,  110,  578,  579,  396,  110,
      395,  574,  575,  576,  577,  580,  110,  392,  389,  388,
      581,  110,  387,  386,  108,  110,  108,  108,  108,  383,

      108,  108,  382,  108,  573,  108,  108,  108,  377,  108,
      108,  108,  376,  108,  108,  108,  375,  108,  108,  374,
      108,  110,  108,  108,  108,  110,  108,  108,  373,  108,
      110,  108,  108,  108,  110,  108,  108,  370,  110,  369,
      368,  367,  110,  366,  365,  364,  819,  110,  819,  363,
      358,  110,  108,  357,  108,  108,  110,  356,  582,  355,
      110,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  634,  352,  108,  634,  108,  108,  583,  351,  110,
      108,  584,  108,  108,  350,  349,  348,  634,  108,  347,
      108,  108,  634,  108,  346,  108,  108,  278,  819,  108,

      110,  108,  108,  108,  273,  108,  108,  110,  108,  272,
      108,  108,  270,  268,  108,  110,  108,  108,  267,  229,
      110,  108,  637,  108,  108,  108,  110,  108,  108,  108,
      110,  108,  108,  217,  199,  110,  635,  108,  636,  108,
      108,  110,  108,  171,  108,  108,  170,  165,  110,  162,
      159,  108,  110,  108,  108,  108,  110,  108,  108,  108,
      819,  108,  108,  108,  110,  108,  108,  638,  108,  110,
      108,  108,   53,  108,  639,  108,  108,  108,  110,  108,
      108,  108,  110,  108,  108,   51,  110,  640,   53,   51,
      110,  819,  819,  819,  819,  110,  819,  819,  819,  108,

      110,  108,  108,  108,  110,  108,  108,  819,  110,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  678,
      819,  108,  678,  108,  108,  108,  110,  108,  108,  819,
      110,  108,  641,  108,  108,  678,  108,  819,  108,  108,
      678,  108,  681,  108,  108,  819,  819,  108,  110,  108,
      108,  819,  110,  679,  108,  680,  108,  108,  110,  819,
      819,  819,  108,  110,  108,  108,  819,  108,  110,  108,
      108,  819,  819,  108,  110,  108,  108,  108,  819,  108,
      108,  110,  819,  819,  819,  108,  683,  108,  108,  110,
      819,  819,  819,  684,  110,  819,  108,  682,  108,  108,

      110,  819,  819,  108,  110,  108,  108,  708,  108,  710,
      108,  108,  110,  819,  819,  108,  709,  108,  108,  108,
      819,  108,  108,  110,  712,  819,  819,  819,  711,  108,
      110,  108,  108,  819,  108,  110,  108,  108,  108,  819,
      108,  108,  110,  819,  819,  108,  110,  108,  108,  108,
      819,  108,  108,  819,  819,  819,  110,  108,  819,  108,
      108,  110,  819,  819,  108,  110,  108,  108,  819,  729,
      819,  731,  110,  819,  819,  730,  110,  819,  819,  819,
      747,  819,  732,  108,  110,  108,  108,  108,  819,  108,
      108,  110,  763,  108,  748,  108,  108,  819,  749,  108,

      764,  108,  108,  108,  819,  108,  108,  819,  819,  108,
      110,  108,  108,  765,  110,  819,  819,  779,  819,  790,
      110,  108,  819,  108,  108,  819,  110,  819,  798,  108,
      110,  108,  108,  819,  819,  780,  110,  819,  819,  108,
      781,  108,  108,  108,  819,  108,  108,  108,  110,  108,
      108,  108,  819,  108,  108,  791,  110,  819,  108,  792,
      108,  108,  108,  819,  108,  108,  110,  819,  819,  108,
      110,  108,  108,  799,  110,  819,  819,  108,  110,  108,
      108,  800,  819,  819,  108,  110,  108,  108,  819,  110,
      819,  819,  819,  819,  819,  819,  110,  819,  805,  819,

      819,  819,  809,  804,  110,  819,  819,  819,  819,  819,
      819,  110,  819,  819,  813,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  817,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  818,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   62,  819,
      819,  819,   62,   62,   62,   62,   62,   62,  103,  103,
      819,  103,  819,  819,  103,  107,  107,  107,  819,  819,
      819,  107,  107,  107,  107,  107,  109,  819,  819,  109,
      819,  819,  819,  109,  109,  109,  109,  109,  109,   64,

      819,   64,   64,   64,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  271,  271,
      819,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,   97,   97,  819,   97,  275,  275,  275,  275,
      279,  279,  279,  279,  279,  281,  281,  819,  819,  819,
      281,  281,  281,  281,  281,  282,  819,  819,  819,  282,
      282,  282,  282,  282,  282,  283,  819,  819,  819,  283,
      283,  283,  283,  283,  283,  452,  452,  819,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  455,
      455,  455,  455,  457,  457,  457,  457,  461,  819,  819,

      819,  461,  461,  461,  461,  461,  461,  462,  819,  819,
      819,  462,  462,  462,  462,  462,  462,  559,  559,  559,
      559,  631,  631,  631,  631,  677,  677,  677,  677,  707,
      707,  707,  707,  728,  728,  728,  728,  746,  746,  746,
      746,  762,  762,  762,  762,  778,  778,  778,  778,  789,
      789,  789,  789,  797,  797,  797,  797,  803,  803,  803,
      803,  808,  808,  808,  808,  812,  812,  812,  812,  816,
      816,  816,  816,    3,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819
    } ;

static yyconst flex_int16_t yy_chk[2352] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    6,    6,    9,
       10,   10,   10,   52,   52,   10,  811,   10,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   18,   54,   60,

      189,   25,   18,  810,   25,   25,   60,  189,   26,   20,
       26,   26,   27,  273,   27,   27,   58,   27,   58,    9,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       20,   18,   68,   68,   75,   26,   20,   76,   54,   27,
       75,   76,  273,   17,   25,  100,   20,  100,   75,  111,
       76,   17,   17,   17,   17,   17,   17,   17,   17,   17,
      200,   17,   17,   17,   17,   17,  200,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   19,  807,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   31,  111,
       31,   31,   79,   82,  806,   19,   19,   19,   19,   32,

       79,   32,   32,   19,   19,   34,   82,   34,   34,   82,
       19,   82,   19,   19,   19,   31,   33,  217,   33,   33,
      217,  167,   35,  167,   35,   35,   32,  178,  802,  178,
       97,   19,   34,   37,  801,   37,   37,   31,   36,   31,
       36,   36,   38,   33,   38,   38,   85,   32,   31,   35,
       85,   97,   32,   39,   31,   39,   39,  796,  179,   85,
       37,   34,   85,   32,   33,   36,  794,   97,   41,   38,
       41,   41,  105,  105,   33,  199,   33,   33,  179,   40,
       39,   40,   40,   42,   33,   42,   42,  199,   46,  248,
       46,   46,   35,   38,  248,   41,   38,   36,   37,  246,

       43,   39,   43,   43,   80,   39,   40,  246,   80,   39,
       42,  208,  105,  208,   39,   46,  210,   80,  210,   45,
       39,   45,   45,   80,  247,  507,   47,   43,   47,   47,
      507,   40,   41,   62,   88,   62,   62,   88,  203,  247,
       40,   88,   42,   87,   42,   87,   45,   42,  788,   46,
       43,   88,   43,   47,  203,  232,  234,   64,   64,  232,
       62,   64,   73,  234,  235,   43,   44,  235,   44,   44,
      249,   45,   73,   64,   64,   73,   87,   45,  249,   64,
       87,  244,   73,   45,  227,   87,  227,   47,  244,   45,
      390,  785,  784,   44,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,  390,   69,   69,  103,  783,  279,
       70,  777,   70,   70,   44,   70,  513,   70,   44,   63,
      513,   44,   44,  776,   44,   44,   65,   65,  103,   44,
       65,  775,   44,   44,  103,  279,  279,   69,   69,  448,
       70,   65,   65,   65,  103,   69,  457,   69,   65,   69,
       98,   69,   71,  448,   71,   98,  279,  773,   71,   71,
      772,  770,   71,   70,  459,   71,  459,  457,   78,   71,
       71,   71,   71,   74,  769,   74,   74,   78,   74,  759,
      758,   78,   78,   78,   83,  108,   83,  108,  108,   98,
       84,   98,   84,   83,   83,   84,   83,   84,   86,  109,

       86,  109,  109,   86,  458,   86,   83,  112,  757,  112,
      112,   74,  108,  717,  531,  113,  756,  113,  113,  755,
       84,   74,   74,  717,   84,  458,  109,   84,  531,  114,
      531,  114,  114,  115,  112,  115,  115,  754,  753,   84,
       86,  752,  113,   84,   96,  751,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,  114,  744,  743,  116,
      115,  116,  116,  742,  741,   96,  113,  560,  830,  560,
      830,   96,  112,  117,  740,  117,  117,  750,  750,  750,
      114,   96,  118,  739,  118,  118,  116,  119,  738,  119,
      119,  737,  736,  120,  115,  120,  120,  735,  734,  121,

      117,  121,  121,  835,  122,  835,  122,  122,  123,  118,
      123,  123,  733,  124,  119,  124,  124,  726,  724,  125,
      120,  125,  125,  116,  723,  117,  121,  722,  721,  117,
      118,  122,  720,  718,  118,  123,  716,  715,  125,  118,
      124,  126,  714,  126,  126,  119,  125,  713,  842,  127,
      842,  127,  127,  128,  706,  128,  128,  702,  701,  129,
      121,  129,  129,  699,  698,  120,  122,  697,  126,  122,
      130,  696,  130,  130,  123,  125,  127,  844,  129,  844,
      128,  124,  131,  693,  131,  131,  129,  692,  132,  126,
      132,  132,  133,  691,  133,  133,  134,  130,  134,  134,

      690,  135,  689,  135,  135,  688,  687,  686,  136,  131,
      136,  136,  676,  675,  127,  132,  674,  671,  670,  133,
      128,  130,  137,  134,  137,  137,  669,  667,  135,  666,
      663,  138,  130,  138,  138,  136,  139,  662,  139,  139,
      130,  131,  140,  661,  140,  140,  660,  659,  132,  137,
      141,  658,  141,  141,  134,  135,  657,  653,  138,  142,
      133,  142,  142,  139,  143,  651,  143,  143,  144,  140,
      144,  144,  650,  145,  136,  145,  145,  141,  146,  649,
      146,  146,  148,  138,  148,  148,  142,  147,  645,  147,
      147,  143,  644,  643,  140,  144,  629,  628,  139,  627,

      145,  140,  626,  625,  624,  146,  623,  622,  621,  148,
      142,  620,  141,  149,  147,  149,  149,  619,  142,  144,
      618,  150,  616,  150,  150,  142,  151,  143,  151,  151,
      615,  145,  148,  614,  613,  152,  146,  152,  152,  145,
      149,  153,  146,  153,  153,  612,  611,  147,  150,  610,
      608,  607,  154,  151,  154,  154,  155,  606,  155,  155,
      149,  156,  152,  156,  156,  605,  604,  157,  153,  157,
      157,  603,  598,  597,  158,  596,  158,  158,  284,  154,
      284,  284,  595,  155,  152,  150,  594,  274,  156,  593,
      591,  590,  274,  152,  157,  274,  588,  585,  152,  152,

      152,  158,  557,  154,  155,  284,  153,  285,  554,  285,
      285,  153,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  553,  552,  156,  277,  274,  277,  274,  286,
      550,  286,  286,  157,  285,  549,  546,  166,  158,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  287,
      277,  287,  287,  277,  545,  544,  286,  285,  288,  543,
      288,  288,  289,  542,  289,  289,  277,  290,  541,  290,
      290,  277,  291,  538,  291,  291,  287,  292,  536,  292,
      292,  535,  534,  533,  293,  288,  293,  293,  532,  289,
      294,  530,  294,  294,  290,  295,  529,  295,  295,  291,

      528,  527,  524,  296,  292,  296,  296,  297,  287,  297,
      297,  293,  298,  523,  298,  298,  299,  294,  299,  299,
      521,  519,  295,  300,  518,  300,  300,  290,  516,  301,
      296,  301,  301,  302,  297,  302,  302,  515,  303,  298,
      303,  303,  514,  299,  511,  292,  293,  510,  294,  304,
      300,  304,  304,  509,  508,  305,  301,  305,  305,  306,
      302,  306,  306,  506,  299,  303,  504,  503,  307,  296,
      307,  307,  501,  499,  450,  447,  304,  308,  297,  308,
      308,  309,  305,  309,  309,  446,  306,  307,  310,  445,
      310,  310,  444,  439,  311,  307,  311,  311,  312,  302,

      312,  312,  438,  313,  308,  313,  313,  314,  309,  314,
      314,  304,  437,  436,  315,  310,  315,  315,  434,  433,
      432,  311,  313,  431,  308,  312,  316,  430,  316,  316,
      313,  429,  427,  317,  314,  317,  317,  310,  416,  414,
      318,  315,  318,  318,  319,  413,  319,  319,  320,  412,
      320,  320,  321,  316,  321,  321,  411,  410,  409,  322,
      317,  322,  322,  323,  408,  323,  323,  318,  405,  404,
      324,  319,  324,  324,  325,  320,  325,  325,  326,  321,
      326,  326,  327,  317,  327,  327,  322,  402,  400,  328,
      323,  328,  328,  318,  316,  398,  329,  324,  329,  329,

      330,  325,  330,  330,  331,  326,  331,  331,  396,  327,
      319,  394,  333,  393,  333,  333,  328,  391,  332,  385,
      332,  332,  334,  329,  334,  334,  335,  330,  335,  335,
      336,  331,  336,  336,  324,  384,  332,  332,  332,  333,
      326,  382,  379,  377,  327,  332,  375,  374,  337,  334,
      337,  337,  338,  335,  338,  338,  339,  336,  339,  339,
      340,  373,  340,  340,  341,  371,  341,  341,  370,  369,
      331,  342,  334,  342,  342,  337,  364,  335,  333,  338,
      363,  359,  358,  339,  357,  341,  343,  340,  343,  343,
      344,  341,  344,  344,  345,  352,  345,  345,  342,  351,

      337,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  350,  354,  343,  354,  349,  348,  344,  338,  340,
      347,  345,  339,  463,  346,  463,  463,  464,  270,  464,
      464,  269,  465,  342,  465,  465,  466,  354,  466,  466,
      354,  467,  344,  467,  467,  468,  268,  468,  468,  469,
      463,  469,  469,  354,  464,  267,  265,  264,  354,  465,
      262,  261,  470,  466,  470,  470,  260,  471,  467,  471,
      471,  472,  468,  472,  472,  473,  469,  473,  473,  474,
      257,  474,  474,  465,  475,  255,  475,  475,  476,  470,
      476,  476,  254,  477,  471,  477,  477,  253,  472,  252,

      474,  478,  473,  478,  478,  250,  474,  467,  245,  242,
      241,  475,  240,  239,  477,  476,  479,  238,  479,  479,
      477,  237,  480,  473,  480,  480,  236,  470,  478,  481,
      233,  481,  481,  231,  230,  228,  476,  475,  482,  226,
      482,  482,  483,  479,  483,  483,  225,  224,  484,  480,
      484,  484,  485,  478,  485,  485,  481,  223,  221,  487,
      219,  487,  487,  218,  486,  482,  486,  486,  488,  483,
      488,  488,  214,  213,  480,  484,  487,  487,  212,  485,
      211,  486,  486,  486,  486,  488,  487,  209,  207,  206,
      488,  486,  205,  204,  489,  488,  489,  489,  490,  202,

      490,  490,  201,  491,  482,  491,  491,  492,  197,  492,
      492,  493,  196,  493,  493,  494,  194,  494,  494,  193,
      495,  489,  495,  495,  496,  490,  496,  496,  192,  497,
      491,  497,  497,  498,  492,  498,  498,  188,  493,  187,
      185,  184,  494,  183,  182,  181,  562,  495,  562,  180,
      177,  496,  563,  176,  563,  563,  497,  175,  492,  174,
      498,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  562,  165,  564,  562,  564,  564,  494,  164,  563,
      565,  495,  565,  565,  163,  162,  161,  562,  566,  160,
      566,  566,  562,  567,  159,  567,  567,  102,   95,  568,

      564,  568,  568,  569,   94,  569,  569,  565,  570,   93,
      570,  570,   92,   91,  571,  566,  571,  571,   89,   81,
      567,  572,  568,  572,  572,  573,  568,  573,  573,  574,
      569,  574,  574,   77,   72,  570,  565,  575,  566,  575,
      575,  571,  576,   67,  576,  576,   66,   61,  572,   59,
       57,  577,  573,  577,  577,  578,  574,  578,  578,  579,
       56,  579,  579,  580,  575,  580,  580,  569,  581,  576,
      581,  581,   53,  582,  571,  582,  582,  583,  577,  583,
      583,  584,  578,  584,  584,   51,  579,  572,    7,    5,
      580,    3,    0,    0,  633,  581,  633,    0,    0,  635,

      582,  635,  635,  636,  583,  636,  636,    0,  584,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  633,
        0,  637,  633,  637,  637,  638,  635,  638,  638,    0,
      636,  639,  584,  639,  639,  633,  640,    0,  640,  640,
      633,  641,  637,  641,  641,    0,    0,  679,  637,  679,
      679,    0,  638,  635,  680,  636,  680,  680,  639,    0,
        0,    0,  681,  640,  681,  681,    0,  682,  641,  682,
      682,    0,    0,  683,  679,  683,  683,  684,    0,  684,
      684,  680,    0,    0,    0,  708,  640,  708,  708,  681,
        0,    0,    0,  641,  682,    0,  709,  639,  709,  709,

      683,    0,    0,  710,  684,  710,  710,  679,  711,  681,
      711,  711,  708,    0,    0,  712,  680,  712,  712,  729,
        0,  729,  729,  709,  684,    0,    0,    0,  683,  730,
      710,  730,  730,    0,  731,  711,  731,  731,  732,    0,
      732,  732,  712,    0,    0,  747,  729,  747,  747,  748,
        0,  748,  748,    0,    0,    0,  730,  749,    0,  749,
      749,  731,    0,    0,  763,  732,  763,  763,    0,  710,
        0,  712,  747,    0,    0,  711,  748,    0,    0,    0,
      729,    0,  712,  764,  749,  764,  764,  765,    0,  765,
      765,  763,  747,  780,  731,  780,  780,    0,  732,  779,

      748,  779,  779,  781,    0,  781,  781,    0,    0,  790,
      764,  790,  790,  749,  765,    0,    0,  763,    0,  779,
      780,  791,    0,  791,  791,    0,  779,    0,  790,  792,
      781,  792,  792,    0,    0,  764,  790,    0,    0,  798,
      765,  798,  798,  799,    0,  799,  799,  800,  791,  800,
      800,  804,    0,  804,  804,  780,  792,    0,  805,  781,
      805,  805,  809,    0,  809,  809,  798,    0,    0,  813,
      799,  813,  813,  791,  800,    0,    0,  817,  804,  817,
      817,  792,    0,    0,  818,  805,  818,  818,    0,  809,
        0,    0,    0,    0,    0,    0,  813,    0,  800,    0,

        0,    0,  804,  799,  817,    0,    0,    0,    0,    0,
        0,  818,    0,    0,  809,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  813,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  817,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  821,    0,
        0,    0,  821,  821,  821,  821,  821,  821,  822,  822,
        0,  822,    0,    0,  822,  823,  823,  823,    0,    0,
        0,  823,  823,  823,  823,  823,  824,    0,    0,  824,
        0,    0,    0,  824,  824,  824,  824,  824,  824,  825,

        0,  825,  825,  825,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  827,  827,
        0,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  828,  828,    0,  828,  829,  829,  829,  829,
      831,  831,  831,  831,  831,  832,  832,    0,    0,    0,
      832,  832,  832,  832,  832,  833,    0,    0,    0,  833,
      833,  833,  833,  833,  833,  834,    0,    0,    0,  834,
      834,  834,  834,  834,  834,  836,  836,    0,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  837,
      837,  837,  837,  838,  838,  838,  838,  839,    0,    0,

        0,  839,  839,  839,  839,  839,  839,  840,    0,    0,
        0,  840,  840,  840,  840,  840,  840,  841,  841,  841,
      841,  843,  843,  843,  843,  845,  845,  845,  845,  846,
      846,  846,  846,  847,  847,  847,  847,  848,  848,  848,
      848,  849,  849,  849,  849,  850,  850,  850,  850,  851,
      851,  851,  851,  852,  852,  852,  852,  853,  853,  853,
      853,  854,  854,  854,  854,  855,  855,  855,  855,  856,
      856,  856,  856,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[285] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "runtime/ocelot/parser/implementation/ptx.ll"
/*! \file ptx.lpp
	\date Wednesday January 14, 2009
	\author Gregory Diamos
	\brief The flex lexical description of the PTX language
*/
/******************************************************************************/
/* DEFINITIONS                                                                */
#line 17 "runtime/ocelot/parser/implementation/ptx.ll"
	
	#ifndef PTX_LPP_INCLUDED
	#define PTX_LPP_INCLUDED

	// Ocelot Includes
	#include <ocelot/parser/interface/PTXLexer.h>

	// Hydrazine Includes
	#include <hydrazine/interface/macros.h>
	#include <hydrazine/interface/string.h>

	// Standard Library Includes
	#include <cassert>
	#include <sstream>
	#include <cstring>
		
	void sstrcpy( char* destination, const char* source, unsigned int max );
	
	// Convert binary string to uint
	long long unsigned int binaryToUint( const std::string& );
	
/******************************************************************************/
#line 1284 "/home/soroosh/Project/gdev/build/cuda/ptx.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 86 "runtime/ocelot/parser/implementation/ptx.ll"

                                    
#line 1392 "/home/soroosh/Project/gdev/build/cuda/ptx.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 820 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2274 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 88 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_INCLUDE; \
                                    return PREPROCESSOR_INCLUDE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 90 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_DEFINE; \
                                    return PREPROCESSOR_DEFINE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 92 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_IF; \
                                    return PREPROCESSOR_IF; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 94 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_IFDEF; \
                                    return PREPROCESSOR_IFDEF; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_ELSE; \
                                    return PREPROCESSOR_ELSE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 98 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_ENDIF; \
                                    return PREPROCESSOR_ENDIF; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 100 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_LINE; \
                                    return PREPROCESSOR_LINE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 102 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = PREPROCESSOR_FILE; \
                                    return PREPROCESSOR_FILE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 105 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_ADD; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 107 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_ADDC; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 109 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_AND; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 111 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_ATOM; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 113 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_ABS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 115 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BAR; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 117 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BFI; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 119 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BFE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 121 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BFIND; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 123 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BRA; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 125 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BREV; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_BRKPT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 129 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_CALL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_CLZ; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 133 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_CNOT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 135 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_COPYSIGN; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 137 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_COS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 139 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_CVT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 141 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_CVTA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 143 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_DIV; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 145 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_EX2; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 147 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_EXIT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 149 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_FMA; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 151 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_ISSPACEP; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 153 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_LD; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 155 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_LDU; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 157 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_LG2; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 159 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MEMBAR; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 161 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MIN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 163 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MAD; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 165 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MAD24; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 167 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MAX; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 169 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MOV; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 171 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MUL; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 173 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_MUL24; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 175 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_NEG; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 177 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_NOT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 179 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_OR; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 181 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_PMEVENT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 183 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                  return OPCODE_PREFETCH; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 185 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                  return OPCODE_PREFETCHU; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 187 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_POPC; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 189 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_PRMT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 191 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_RCP; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 193 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_RED; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 195 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_REM; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 197 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_RET; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 199 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_RSQRT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 201 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SAD; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 203 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SELP; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 205 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SET; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 207 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SETP; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 209 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SHL; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 211 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SHR; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 213 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SIN; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 215 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SLCT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 217 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SQRT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 219 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_ST; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 221 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SUB; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 223 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SUBC; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 225 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SULD; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 227 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SUST; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 229 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SURED; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 231 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_SUQ; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 233 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_TESTP; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 235 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_TEX; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 237 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_TLD4; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 239 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_TRAP; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 241 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_TXQ; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 243 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_VOTE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 245 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return OPCODE_XOR; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 249 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ALIGN; \
                                    return TOKEN_ALIGN; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 251 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ADDRESS_SIZE; \
                                    return TOKEN_ADDRESS_SIZE; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 253 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CALL_PROTOTYPE; \
                                    return TOKEN_CALL_PROTOTYPE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 255 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CALL_TARGETS; \
                                    return TOKEN_CALL_TARGETS; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 257 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CONST; \
                                    return TOKEN_CONST; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 259 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ENTRY; \
                                    return TOKEN_ENTRY; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 261 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_EXTERN; \
                                    return TOKEN_EXTERN; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 263 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_FILE; \
                                    return TOKEN_FILE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 265 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_FUNCTION; \
                                    return TOKEN_FUNCTION; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 267 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_GLOBAL; \
                                    return TOKEN_GLOBAL; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 269 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LOCAL; \
                                    return TOKEN_LOCAL; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 271 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LOC; \
                                    return TOKEN_LOC; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 273 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MAXNCTAPERSM; 
                                    return TOKEN_MAXNCTAPERSM; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 275 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MINNCTAPERSM; 
                                    return TOKEN_MINNCTAPERSM; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 277 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MAXNREG; 
                                    return TOKEN_MAXNREG; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 279 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MAXNTID; 
                                    return TOKEN_MAXNTID; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 281 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_PARAM; \
                                    return TOKEN_PARAM; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 283 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_PRAGMA; \
                                    return TOKEN_PRAGMA; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 285 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_PTR; \
									return TOKEN_PTR; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 287 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_REG; \
                                    return TOKEN_REG; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 289 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SAMPLERREF; \
                                    return TOKEN_SAMPLERREF; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 291 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SECTION; \
                                    return TOKEN_SECTION; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 293 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SHARED; \
                                    return TOKEN_SHARED;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 295 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SHIFT_AMOUNT; \
                                    return TOKEN_SHIFT_AMOUNT;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 297 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SURFREF; \
                                    return TOKEN_SURFREF; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 299 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TARGET; \
                                    return TOKEN_TARGET; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 301 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TEXREF; \
                                    return TOKEN_TEXREF; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 303 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_VERSION; \
                                    return TOKEN_VERSION; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 305 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_VISIBLE; \
                                    return TOKEN_VISIBLE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 307 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_WEAK; \
                                    return TOKEN_WEAK; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 310 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CTA; return TOKEN_CTA; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 311 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_GL; return TOKEN_GL; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 312 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SYS; return TOKEN_SYS; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 314 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM10; 
                                    return TOKEN_SM10; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 316 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM11; 
                                    return TOKEN_SM11; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 318 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM12; 
                                    return TOKEN_SM12; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 320 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM13; 
                                    return TOKEN_SM13; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 322 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM20; 
                                    return TOKEN_SM20; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 324 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM21; 
                                    return TOKEN_SM21; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 326 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM30; 
                                    return TOKEN_SM30; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 328 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SM35; 
                                    return TOKEN_SM35; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 330 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MAP_F64_TO_F32; 
                                    return TOKEN_MAP_F64_TO_F32; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 332 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TEXMODE_INDEPENDENT; 
                                    return TOKEN_TEXMODE_INDEPENDENT; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 334 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TEXMODE_UNIFIED; 
                                    return TOKEN_TEXMODE_UNIFIED; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 337 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_U32; return TOKEN_U32; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 338 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_S32; return TOKEN_S32; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 339 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_S8; return TOKEN_S8; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 340 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_S16; return TOKEN_S16; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 341 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_S64; return TOKEN_S64; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 342 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_U8; return TOKEN_U8; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 343 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_U16; return TOKEN_U16; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 344 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_U64; return TOKEN_U64; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 345 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_B8; return TOKEN_B8; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 346 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_B16; return TOKEN_B16; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 347 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_B32; return TOKEN_B32; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 348 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_B64; return TOKEN_B64; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 349 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_F16; return TOKEN_F16; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 350 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_F64; return TOKEN_F64; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 351 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_F32; return TOKEN_F32; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 352 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_PRED; \
                                    return TOKEN_PRED; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 355 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_EQ; return TOKEN_EQ; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 356 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NE; return TOKEN_NE; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 357 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LT; return TOKEN_LT; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 358 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LE; return TOKEN_LE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 359 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_GT; return TOKEN_GT; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 360 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_GE; return TOKEN_GE; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 361 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LS; return TOKEN_LS; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 362 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_HS; return TOKEN_HS; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 363 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_EQU; return TOKEN_EQU; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 364 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NEU; return TOKEN_NEU; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 365 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LTU; return TOKEN_LTU; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 366 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LEU; return TOKEN_LEU; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 367 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_GTU; return TOKEN_GTU; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 368 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_GEU; return TOKEN_GEU; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 369 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NUM; return TOKEN_NUM; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 370 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NAN; return TOKEN_NAN; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 372 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_AND; return TOKEN_AND; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 373 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_OR; return TOKEN_OR; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 374 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_XOR; return TOKEN_XOR; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 376 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_HI; return TOKEN_HI; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 377 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LO; return TOKEN_LO; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 378 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RN; return TOKEN_RN; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 379 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RM; return TOKEN_RM; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 380 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RZ; return TOKEN_RZ; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 381 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RP; return TOKEN_RP; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 382 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RNI; return TOKEN_RNI; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 383 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RMI; return TOKEN_RMI; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 384 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RZI; return TOKEN_RZI; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 385 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RPI; return TOKEN_RPI; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 386 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SAT; return TOKEN_SAT; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 387 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_FTZ; return TOKEN_FTZ; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 388 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_APPROX; \
                                    return TOKEN_APPROX; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 391 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TAIL; \
                                    return TOKEN_TAIL; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 393 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_UNI; return TOKEN_UNI; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 394 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_BYTE; \
                                    return TOKEN_BYTE; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 396 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_WIDE; \
                                    return TOKEN_WIDE; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 398 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CARRY; \
                                    return TOKEN_CARRY; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 400 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_VOLATILE; \
                                    return TOKEN_VOLATILE; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 402 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_FULL; \
                                    return TOKEN_FULL; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 405 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_V2; return TOKEN_V2; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 406 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_V4; return TOKEN_V4; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 408 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_X; return TOKEN_X; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 409 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_Y; return TOKEN_Y; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 410 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_Z; return TOKEN_Z; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 411 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_W; return TOKEN_W; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 412 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_R; return TOKEN_R; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 413 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_G; return TOKEN_G; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 414 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_B; return TOKEN_B; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 415 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_A; return TOKEN_A; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 417 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ANY; return TOKEN_ANY; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 418 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ALL; return TOKEN_ALL; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 420 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MIN; return TOKEN_MIN; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 421 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_MAX; return TOKEN_MAX; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 422 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_DEC; return TOKEN_DEC; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 423 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_INC; return TOKEN_INC; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 424 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ADD; return TOKEN_ADD; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 425 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CAS; return TOKEN_CAS; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 426 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_EXCH; return TOKEN_EXCH; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 428 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_1D; return TOKEN_1D; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 429 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_2D; return TOKEN_2D; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 430 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_3D; return TOKEN_3D; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 431 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_A1D; return TOKEN_A1D; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 432 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_A2D; return TOKEN_A2D; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 433 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CUBE; return TOKEN_CUBE; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 434 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ACUBE; return TOKEN_ACUBE; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 436 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_P; return TOKEN_P; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 438 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CA; return TOKEN_CA; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 439 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_WB; return TOKEN_WB; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 440 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CG; return TOKEN_CG; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 441 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CS; return TOKEN_CS; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 442 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_LU; return TOKEN_LU; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 443 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CV; return TOKEN_CV; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 444 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_WT; return TOKEN_WT; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 446 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_L1; return TOKEN_L1; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 447 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_L2; return TOKEN_L2; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 449 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_WIDTH; \
                                    return TOKEN_WIDTH; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 451 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_HEIGHT; \
                                    return TOKEN_HEIGHT; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 453 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_DEPTH; \
                                    return TOKEN_DEPTH; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 455 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NORMALIZED_COORDS; \
                                    return TOKEN_NORMALIZED_COORDS; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 457 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_FILTER_MODE; \
                                    return TOKEN_FILTER_MODE; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 459 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ADDR_MODE_0; \
                                    return TOKEN_ADDR_MODE_0; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 461 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ADDR_MODE_1; \
                                    return TOKEN_ADDR_MODE_1; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 463 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ADDR_MODE_2; \
                                    return TOKEN_ADDR_MODE_2; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 465 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CHANNEL_DATA_TYPE; \
                                    return TOKEN_CHANNEL_DATA_TYPE; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 467 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CHANNEL_ORDER; \
                                    return TOKEN_CHANNEL_ORDER; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 469 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TRAP; \
                                    return TOKEN_TRAP; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 471 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_TO; return TOKEN_TO; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 472 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_CLAMP; 
                                    return TOKEN_CLAMP; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 474 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ZERO; \
                                    return TOKEN_ZERO; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 476 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ARRIVE; \
                                    return TOKEN_ARRIVE; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 478 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RED; \
                                    return TOKEN_RED; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 480 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SYNC; \
                                    return TOKEN_SYNC; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 482 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_POPC; \
                                    return TOKEN_POPC; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 485 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_BALLOT; \
                                    return TOKEN_BALLOT; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 488 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_F4E; return TOKEN_F4E; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 489 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_B4E; return TOKEN_B4E; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 490 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RC8; return TOKEN_RC8; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 491 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ECL; return TOKEN_ECL; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 492 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_ECR; return TOKEN_ECR; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 493 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_RC16; \
                                    return TOKEN_RC16; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 496 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_FINITE; \
                                    return TOKEN_FINITE; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 498 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_INFINITE; \
                                    return TOKEN_INFINITE; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 500 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NUMBER; \
                                    return TOKEN_NUMBER; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 502 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NOT_A_NUMBER; \
                                    return TOKEN_NOT_A_NUMBER; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 504 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_NORMAL; \
                                    return TOKEN_NORMAL; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 506 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = TOKEN_SUBNORMAL; \
                                    return TOKEN_SUBNORMAL; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 509 "runtime/ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; stream << yytext; \
                                    stream >> yylval->value; \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 512 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->value = binaryToUint( yytext ); \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 514 "runtime/ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; \
                                    stream << std::hex; stream << yytext; \
                                    stream >> yylval->value; \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 518 "runtime/ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; \
                                    stream << std::oct; stream << yytext; \
                                    stream >> yylval->value; \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 523 "runtime/ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; stream << yytext; \
                                    stream >> yylval->uvalue; \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 526 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->uvalue = binaryToUint( yytext ); \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 528 "runtime/ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; \
                                    stream << std::hex; stream << yytext; \
                                    stream >> yylval->uvalue; \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 532 "runtime/ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; \
                                    stream << std::oct; stream << yytext; \
                                    stream >> yylval->uvalue; \
                                    return TOKEN_DECIMAL_CONSTANT; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 537 "runtime/ocelot/parser/implementation/ptx.ll"
{ yytext[1] = 'x'; std::stringstream stream; \
                                    stream << std::hex << yytext; \
                                    stream >> yylval->uvalue; \
                                    return TOKEN_SINGLE_CONSTANT; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 541 "runtime/ocelot/parser/implementation/ptx.ll"
{ yytext[1] = 'x'; std::stringstream stream; \
                                    stream << std::hex << yytext; \
                                    stream >> yylval->uvalue; \
                                    return TOKEN_DOUBLE_CONSTANT; }                  
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 545 "runtime/ocelot/parser/implementation/ptx.ll"
{ std::stringstream stream; stream << yytext; \
                                    stream >> yylval->doubleFloat; \
                                    return TOKEN_DOUBLE_CONSTANT; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 549 "runtime/ocelot/parser/implementation/ptx.ll"
{ const char* position = strchr( yytext, ' ' );\
                                    if( position == 0 ) \
                                    { \
                                        sstrcpy( yylval->text, yytext, \
                                           MIN( strlen( yytext ), 1024 ) ); \
                                    } \
                                    else \
                                    { \
                                        sstrcpy( yylval->text, yytext, \
                                           MIN( position - yytext + 1, \
                                           1024 ) ); \
                                    } \
                                    \
                                    return TOKEN_LABEL; \
                                }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 564 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext + 1, 1024 ); \
                                    return TOKEN_PREDICATE_IDENTIFIER; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 566 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext + 2, 1024 ); \
                                    return TOKEN_INV_PREDICATE_IDENTIFIER; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 568 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 ); \
                                    return TOKEN_IDENTIFIER;}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 570 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext + 1, \
                                    MIN( strlen( yytext ) - 1, 1024 ) ); \
                                    return TOKEN_STRING;}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 574 "runtime/ocelot/parser/implementation/ptx.ll"
{ sstrcpy( yylval->text, yytext, 1024 );
                                    return TOKEN_METADATA; }
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 576 "runtime/ocelot/parser/implementation/ptx.ll"
{ nextColumn += strlen( yytext ); }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 577 "runtime/ocelot/parser/implementation/ptx.ll"
{ nextColumn += strlen( yytext ) * 4; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 578 "runtime/ocelot/parser/implementation/ptx.ll"
{ nextColumn += strlen( yytext ); }
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 579 "runtime/ocelot/parser/implementation/ptx.ll"
{ nextColumn  = 1; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 581 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = ','; 
                                    yylval->text[1] = '\0'; return (','); }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 583 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = ';'; 
                                    yylval->text[1] = '\0'; return (';'); }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 585 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '.'; 
                                    yylval->text[1] = '\0'; return ('.'); }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 587 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '{'; 
                                    yylval->text[1] = '\0'; return ('{'); }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 589 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '}'; 
                                    yylval->text[1] = '\0'; return ('}'); }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 591 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '['; 
                                    yylval->text[1] = '\0'; return ('['); }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 593 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = ']'; 
                                    yylval->text[1] = '\0'; return (']'); }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 595 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '('; 
                                    yylval->text[1] = '\0'; return ('('); }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 597 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = ')'; 
                                    yylval->text[1] = '\0'; return (')'); }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 599 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '<'; 
                                    yylval->text[1] = '\0'; return ('<'); }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 601 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '+'; 
                                    yylval->text[1] = '\0'; return ('+'); }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 603 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '>'; 
                                    yylval->text[1] = '\0'; return ('>'); }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 605 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '='; 
                                    yylval->text[1] = '\0'; return ('='); }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 607 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '-'; 
                                    yylval->text[1] = '\0'; return ('-'); }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 609 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '!'; 
                                    yylval->text[1] = '\0'; return ('!'); }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 611 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '|'; 
                                    yylval->text[1] = '\0'; return ('|'); }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 613 "runtime/ocelot/parser/implementation/ptx.ll"
{ yylval->text[0] = '_'; 
                                    yylval->text[1] = '\0'; return ('_'); }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 616 "runtime/ocelot/parser/implementation/ptx.ll"
ECHO;
	YY_BREAK
#line 3124 "/home/soroosh/Project/gdev/build/cuda/ptx.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	ptxfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	ptxfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ptxrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) ptxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 820 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 820 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 819);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) ptxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ptxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ptxfree((void *) b->yy_ch_buf  );

	ptxfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)ptxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)ptxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) ptxalloc(new_size  );

		else
			(yy_start_stack) = (int *) ptxrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ptxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *ptxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ptxfree (void * ptr )
{
	free( (char *) ptr );	/* see ptxrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 616 "runtime/ocelot/parser/implementation/ptx.ll"



/******************************************************************************/
/* USER CODE                                                                  */

long long unsigned int binaryToUint( const std::string& string )
{
	return hydrazine::binaryToUint( string );
}

void sstrcpy( char* destination, const char* source, unsigned int max )
{
	return hydrazine::strlcpy( destination, source, max );
}

#endif

/******************************************************************************/


